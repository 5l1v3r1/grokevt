#!/usr/bin/env python

# This script will take an input Windows Event Log and parse it to
# stdout as ASCII text.  This is particularly useful for forensics being
# conducted on an evidence drive under *NIX.
#
# The original code was written in PHP by Jamie French.  It has been
# since ported to Python and extended by Timothy Morgan.
#
# For the original PHP version, please see:
#http://www.whitehats.ca/main/members/Malik/malik_eventlogs/malik_eventlogs.html
# 
# Copyright (C) 2005 Timothy D. Morgan
# Copyright (C) 2004 Jamie French
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# $Id$


import sys
import string
import os
import types
import struct
import re
import time
import csv
from grokevt import *


log_fields =("msg_num","event_type",
             "date_created","date_written",
             "source","category",
             "event_id","event_rva",
             "user","computer",
             "message","strings","data")

header_rec = {'msg_num':"MSG_NUM",'event_type':"EVENT_TYPE",
              'date_created':"DATE_CREATED",'date_written':"DATE_WRITTEN",
              'source':"SOURCE",'category':"CATEGORY",
              'event_id':"EVENT_ID",'event_rva':"EVENT_RVA",
              'user':"USER",'computer':"COMPUTER",
              'message':"MESSAGE",'strings':"STRINGS",'data':"DATA"}


def usage():
    command = os.path.basename(sys.argv[0])
    sys.stderr.write("USAGE:\n")
    sys.stderr.write("  %s -?|--help\n" % command)
    sys.stderr.write("  %s -l <DATABASE_DIR>\n" % command)
    sys.stderr.write("  %s [-v] [-H] [-h] <DATABASE_DIR> <LOG_TYPE>\n\n"
                     % command)
    sys.stderr.write("This program parses a windows event log and prints a\n")
    sys.stderr.write("CSV version of the log to stdout.  Please see the man\n")
    sys.stderr.write("page for more information.\n")


# Globals influenced by command line options
print_loglist = 0
print_verbose = 0
print_header = 1
DB_PATH = None
LOG = None


# Parse command line
argv_len = len(sys.argv)
if (argv_len < 2) or (sys.argv[1] == '-?') or (sys.argv[1] == '--help'):
    usage()
    sys.exit(0)
elif sys.argv[1] == '-l':
    if argv_len == 3:
        print_loglist = 1
        DB_PATH=sys.argv[2]
    else:
        usage()
        sys.stderr.write("ERROR: Incorrect usage for log list command.\n")
        sys.exit(1)
else:
    if (argv_len >= 3):
        DB_PATH=sys.argv[argv_len-2]
        LOG=sys.argv[argv_len-1]

        for option in sys.argv[1:argv_len-2]:
            if option == '-v':
                print_verbose = 1
            elif option == '-H':
                print_header = 0
            elif option == '-h':
                print_header = 1
            else:
                usage()
                sys.stderr.write("ERROR: Unrecognized option '%s'.\n" % option)
                sys.exit(1)
    else:
        usage()
        sys.stderr.write("ERROR: Incorrect usage for log parse command.\n")
        sys.exit(1)


if print_loglist:
    try:
        logs = os.listdir("%s/services" % DB_PATH)
        for l in logs:
            print l
    except Exception, inst:
        sys.stderr.write("%s\n" % inst)
        sys.stderr.write("ERROR: Could not list services directory.\n")
        sys.stderr.write("       Did you run grokevt-builddb first?\n")
        sys.exit(2)
    sys.exit(0)


try:
    if print_verbose:
        sys.stderr.write("INFO: Opening message repository '%s'.\n" % DB_PATH)
    msg_repo = messageRepository(DB_PATH, LOG)
except Exception, inst:
    sys.stderr.write("%s\n" % inst)
    sys.stderr.write("ERROR: Could not read message repository.\n")
    sys.stderr.write("       Did you specify the correct DATABASE_DIR?\n")
    sys.stderr.write("       Did you run grokevt-builddb first?\n")
    sys.exit(2)


evt_filename = "%s/logs/%s.evt" % (DB_PATH, LOG)
try:
    if print_verbose:
        sys.stderr.write("INFO: Opening event log file at '%s'.\n"
                         % evt_filename)
    evt_file = evtFile(evt_filename, msg_repo)
except Exception, inst:
    sys.stderr.write("%s\n" % inst)
    sys.stderr.write("ERROR: Could not open log file.\n")
    sys.stderr.write("       Did grokevt-builddb finish without errors?\n")
    sys.exit(2)

if print_verbose:
    sys.stderr.write("INFO: Checking log file magic...\n")
if(evt_file.guessRecordType() != 'header'):
    sys.stderr.write("ERROR: File doesn't contain event log header.\n")
    sys.stderr.write("       Are you sure this is an event log?\n")
    sys.exit(3)


# Begin parsing logic
header = evt_file.getHeaderRecord()
csvwriter = csv.DictWriter(sys.stdout, log_fields, '', 'ignore')
if print_header:
    csvwriter.writerow(header_rec)

if print_verbose:
    sys.stderr.write("INFO: Now parsing file...\n")
evt_file.seek(header['next_off'])
if(evt_file.guessRecordType() != 'cursor'):
    sys.stderr.write("WARNING: Could not locate cursor record.\n")
    sys.stderr.write("         Naive parsing enabled.\n")

    evt_file.seek(0x30)
    rec = evt_file.getLogRecord()
    while rec:
        for k in rec.keys():
            if(isinstance(rec[k], types.StringTypes)):
                rec[k] = quoteBinaryInString(rec[k])
        csvwriter.writerow(rec)
        rec = evt_file.getLogRecord()
    
else:
    cursor = evt_file.getCursorRecord()
    evt_file.seek(cursor['first_off'])
    
    rec = evt_file.getLogRecord()
    while rec and (evt_file.tell() <= cursor['next_off']):
        for k in rec.keys():
            if(isinstance(rec[k], types.StringTypes)):
                rec[k] = quoteBinaryInString(rec[k])
        csvwriter.writerow(rec)
        rec = evt_file.getLogRecord()
