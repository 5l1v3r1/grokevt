#!/usr/bin/env python

# This script will take an input Windows Event Log and parse it to
# stdout as ASCII text.  This is particularly useful for forensics being
# conducted on an evidence drive under *NIX.
#
# The original code was written in PHP by Jamie French.  It has been
# since ported to Python and extended by Timothy Morgan.
#
# For the original PHP version, please see:
#http://www.whitehats.ca/main/members/Malik/malik_eventlogs/malik_eventlogs.html
# 
# Copyright (C) 2005 Timothy D. Morgan
# Copyright (C) 2004 Jamie French
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# $Id$


import sys
import string
import os
import struct
import re
import time
import csv
from grokevt import *


def usage():
    print "USAGE:"
    print "  %s <DATABASE_DIR> [<LOG_TYPE>]"\
          % os.path.basename(sys.argv[0])
    print
    print "This program parses a windows event log and prints a CSV"
    print "version of the log to stdout.  Please see the man page for"
    print "more information."



log_fields =("msg_num","event_type",
             "date_created","date_written",
             "source","category",
             "event_id","event_rva",
             "user","computer",
             "message","strings","data")

header_rec = {'msg_num':"MSG_NUM",'event_type':"EVENT_TYPE",
              'date_created':"DATE_CREATED",'date_written':"DATE_WRITTEN",
              'source':"SOURCE",'category':"CATEGORY",
              'event_id':"EVENT_ID",'event_rva':"EVENT_RVA",
              'user':"USER",'computer':"COMPUTER",
              'message':"MESSAGE",'strings':"STRINGS",'data':"DATA"}

if ((len(sys.argv) != 3) and (len(sys.argv) != 2))\
       or (sys.argv[1] == '-h') or (sys.argv[1] == '--help'):
    usage()
    sys.exit(1)

DB_PATH=sys.argv[1]
if len(sys.argv) == 2:
    try:
        logs = os.listdir("%s/services" % DB_PATH)
        for l in logs:
            print l
    except Exception, inst:
        print inst
        print "ERROR: Could not list services directory."
        print "       Did you run grokevt-builddb first?"
        sys.exit(2)
    sys.exit(0)


try:
    LOG=sys.argv[2]
    msg_repo = messageRepository(DB_PATH, LOG)
except Exception, inst:
    print inst
    print "ERROR: Could not read message repository."
    print "       Did you run grokevt-builddb first?"
    sys.exit(2)


evt_filename = "%s/logs/%s.evt" % (DB_PATH, LOG)
try:
    evt_file = evtFile(evt_filename, msg_repo)
except Exception, inst:
    print inst
    print "ERROR: Could not open log file."
    print "       Did grokevt-builddb finish without errors?"
    sys.exit(2)


if(evt_file.guessRecordType() != 'header'):
    print "ERROR: file doesn't contain event log header."
    print "       Are you sure this is an event log?"
    sys.exit(3)


# Begin parsing logic
header = evt_file.getHeaderRecord()
csvwriter = csv.DictWriter(sys.stdout, log_fields, '', 'ignore')
csvwriter.writerow(header_rec)

evt_file.seek(header['next_off'])
if(evt_file.guessRecordType() != 'cursor'):
    sys.stderr.write("WARNING: could not locate cursor record.\n")
    sys.stderr.write("         Naive parsing enabled.\n")

    evt_file.seek(0x30)
    rec = evt_file.getLogRecord()
    while rec:
        for k in rec.keys():
            rec[k] = quoteBinaryInString(rec[k])
        csvwriter.writerow(rec)
        rec = evt_file.getLogRecord()
    
else:
    cursor = evt_file.getCursorRecord()
    evt_file.seek(cursor['first_off'])
    
    rec = evt_file.getLogRecord()
    while rec and (evt_file.tell() <= cursor['next_off']):
        for k in rec.keys():
            rec[k] = quoteBinaryInString(rec[k])
        csvwriter.writerow(rec)
        rec = evt_file.getLogRecord()
