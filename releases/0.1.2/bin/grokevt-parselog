#!/usr/bin/env python

# This script will take an input Windows Event Log and parse it to
# stdout as ASCII text.  This is particularly useful for forensics being
# conducted on an evidence drive under *NIX.
#
# The original code was written in PHP by Jamie French.  It has been
# since ported to Python and extended by Timothy Morgan.
#
# For the original PHP version, please see:
#http://www.whitehats.ca/main/members/Malik/malik_eventlogs/malik_eventlogs.html
# 
# Copyright (C) 2005 Timothy D. Morgan
# Copyright (C) 2004 Jamie French
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation version 2 of the
# License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# $Id$


import sys
import string
import os
import struct
import anydbm
import re
import time
import csv

# XXX: This mapping may not be entirely accurate.  In particular,
#      FailureAudit and SuccessAudit were educated guesses.  The others
#      appear to be correct.
eventTypeEnum = ('FailureAudit',
                 'Error',
                 'Warning',
                 'SuccessAudit',
                 'Information')

def usage():
    print "USAGE:"
    print "  %s <DATABASE_DIR> [<LOG_TYPE>]"\
          % os.path.basename(sys.argv[0])
    print
    print "This program parses a windows event log and prints a CSV"
    print "version of the log to stdout.  Please see the man page for"
    print "more information."


# Returns a string which contains s, except for non-printable or
# special characters are quoted in hex with the syntax '\xQQ' where QQ
# is the hex ascii value of the quoted character.  specials must be a
# sequence.
def quoteBinaryInString(s, specials="\\"):
    ret_val = ''
    for c in str(s):
        if (ord(c) < 32) or (ord(c) > 126) or (c in specials):
            ret_val += ("\\x%.2X" % ord(c))
        else:
            ret_val += c

    return ret_val


# Reference:
#  http://blogs.msdn.com/oldnewthing/archive/2004/03/15/89753.aspx
#def binSIDtoASCII(rev,dashes,b0,b1,b2,b3,b4,b5,rest):
#   auth = (b0<<40) | (b1<<32) | (b2<<24) | (b3<<16) | (b4<<8) | b5
#   result = "S-%d-%d" % (rev, auth)
#   for i in range(0,dashes):
#       if(i < len(rest)):
#           result = "%s-%s" % (result, rest[i])
#
#   return result
def binSIDtoASCII(sid_str):
   auth = ((ord(sid_str[2])<<40)
           | (ord(sid_str[3])<<32)
           | (ord(sid_str[4])<<24)
           | (ord(sid_str[5])<<16)
           | (ord(sid_str[6])<<8)
           | ord(sid_str[7]))
   result = "S-%d-%d" % (ord(sid_str[0]), auth)
   rest = sid_str[8:]
   for i in range(0,ord(sid_str[1])):
       if len(rest) >= 4:
           next_int = struct.unpack('<I', rest[:4])[0]
           rest = rest[4:]
           result = "%s-%d" % (result, next_int)

   return result


# Reference:
#  http://msdn.microsoft.com/library/en-us/winui/winui/windowsuserinterface/resources/strings/stringreference/stringfunctions/wsprintf.asp
#
# returns a formatted string.
def wsprintf(fmt, vars):
    # Python's string formatting is very close to wsprintf's.  Just a
    # few types need to be converted to get a close approximation of
    # proper behavior. 

    # XXX: However, as this isn't 100% compliant with the spec, it
    # should be re-written as a state-machine to be fully correct.
    
    optionals = r'(-?#?0?[0-9]*[.]?[0-9]*)'

    # S,ls,lS,hs,hS => s
    py_fmt = re.sub('%'+optionals+'[lh]{0,1}[sS]',
                    r'%\1s', fmt)
    
    # lu,li,ld,hu,hi,hd => d
    py_fmt = re.sub('%'+optionals+'[lh][uid]',
                    r'%\1d', py_fmt)

    # lc,lC,C => c
    py_fmt = re.sub('%'+optionals+'l{0,1}[cC]',
                    r'%\1c', py_fmt)

    # lx => x; lX => X
    py_fmt = re.sub('%'+optionals+'l([xX])',
                    r'%\1\2', py_fmt)

    # p => d
    py_fmt = re.sub('%'+optionals+'p',
                    r'%\1d', py_fmt)

    return (py_fmt % vars)


# Reference:
#  http://msdn.microsoft.com/library/en-us/debug/base/formatmessage.asp
#  XXX: Does someone know of a better reference for this?  The author of
#       that page couldn't write themselves out of a wet paper bag.  Way
#       too much ambiguity.
def formatMessage(fmt, vars):
    # states:
    # 0: normal text
    # 1: in escape sequence
    # 3: in format string
    state=0
    ret_val=''
    arg_num=''
    arg_index = None
    extended_fmt = ''
    for c in fmt:
        if state == 0:
            if c == '%':
                state=1
            else:
                ret_val += c
        elif state == 1:
            if len(arg_num) == 0:
                if ord(c) > 0x2f and ord(c) < 0x3a:
                    arg_num = c
                elif c in ('%', ' ', '.', '!'):
                    ret_val += c
                    state = 0
                elif c == 'n':
                    ret_val += '\x0a'
                    state = 0
            elif len(arg_num) == 1:
                if ord(c) > 0x2f and ord(c) < 0x3a:
                    arg_index = int(arg_num + c) - 1
                else:
                    arg_index = int(arg_num) - 1
                    
                    if c == '!':
                        state = 3
                        extended_fmt = '%'
                    else:
                        if arg_index < len(vars):
                            if c == '%':
                                ret_val += "%s" % vars[arg_index]
                                state = 1
                                arg_num = ''
                            else:
                                ret_val += "%s%s" % (vars[arg_index], c)
                                state = 0
                                arg_num = ''
                        else:
                            # arg_num not in vars
                            if c == '%':
                                ret_val += "%%%s" % arg_num
                                state = 2
                                arg_num = ''
                            else:
                                ret_val += "%%%s%s" % (arg_num, c)
                                state = 0
                                arg_num = ''
        elif state == 3:
            if c == '!':
                state = 0
                ret_val += wsprintf(extended_fmt, vars[arg_index])
            else:
                extended_fmt += c
                
    return ret_val


class messageRepository:
    svc_dbs = {}
    msg_dbs = {}
    def __init__(self, topdir, log):
        msg_dir = "%s/messages" % topdir
        dbs = os.listdir(msg_dir)
        for db in dbs:
            db_file = "%s/%s" % (msg_dir,db)
            self.msg_dbs[db] = anydbm.open(db_file, "r", 0644)

        log_dir = "%s/services" % topdir
        for t in ("category", "event", "parameter"):
            db_file = "%s/%s/%s.db" % (log_dir, log, t)
            self.svc_dbs[t] = anydbm.open(db_file, "r")
   
         
    def getMessageTemplate(self, service, rva):
        ret_val = None
        mdbs = self.svc_dbs["event"].get(service.lower(), None)
        if mdbs:
            for mdb in mdbs.split(':'):
                ret_val = self.msg_dbs[mdb].get(rva, None)
                if ret_val:
                    break
      
        return ret_val


def getRecord(f):
    size_str = f.read(4)
    if len(size_str) < 4:
        return None
    (size,) = struct.unpack('<I', size_str)
    
    fixed_fmt = '<IIIIHHHHHHIIIIII'
    fixed_fmt_len = struct.calcsize(fixed_fmt)

    rec_str = f.read(size-4)
    if len(rec_str) < fixed_fmt_len:
        return [-1,'','','',
                os.path.basename(sys.argv[0]),
                '','-1','','','',
                "There was an error processing this event."\
                + "Binary record is not long enough.",
                '','']
    
    variable_str_len = len(rec_str) - fixed_fmt_len
    (lfle,msg_num,
     date_created,date_written,
     event_id,event_rva_offset,
     event_type,strcount,
     category,unknown,
     closing_record_number,string_offset,
     sid_len,sid_offset,
     data_len,data_offset,
     variable_str) = struct.unpack("%s%ds" % (fixed_fmt, variable_str_len),
                                   rec_str)
    # Grab source and computer fields
    # XXX: Need to properly handle unicode.
    source_end = variable_str.find('\x00\x00')
    source = variable_str[:source_end].replace('\x00', '')
    tmp = variable_str[source_end+2:]
    computer_end = tmp.find('\x00\x00')
    computer = tmp[:computer_end].replace('\x00', '')
    tmp = None
    
    # Grab SID
    sid = 'N/A'
    if sid_len > 0:
        sid_str = rec_str[sid_offset-4:sid_offset+sid_len-4]
        sid = binSIDtoASCII(sid_str)

    # Grab template variables
    strs = []
    if string_offset > 0:
        strs = rec_str[string_offset-4:data_offset-4].split('\x00\x00')
        # XXX: Need to properly handle unicode.
        tmp_strs = []
        for s in strs:
            tmp_strs.append(s.replace('\x00', ''))
        strs = tmp_strs
        tmp_strs = None

    # Grab binary data chunk
    data = ''
    if data_len > 0:
        data = rec_str[data_offset-4:data_offset+data_len-4]
    
    # Retrieve and process message template
    event_rva = "%.8X"%(long(event_rva_offset)<<16|event_id)
    message_template = msg_repo.getMessageTemplate(source, event_rva)
    message = ''
    if message_template:
        message = formatMessage(message_template, strs)
    else:
        sys.stderr.write("WARNING: Couldn't find message"\
                         +" template for event record #%d\n" % msg_num)

    # Format fields and return
    return [msg_num,
            eventTypeEnum[event_type],
            time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(date_created)),
            time.strftime("%Y-%m-%d %H:%M:%S", time.gmtime(date_written)),
            source,
            category,
            event_id,
            "0x%s" % event_rva,
            sid,
            computer,
            message,
            '|'.join(strs).strip('|'),
            data]


header_rec = ("MSG_NUM","EVENT_TYPE",
              "DATE_CREATED","DATE_WRITTEN",
              "SOURCE","CATEGORY",
              "EVENT_ID","EVENT_RVA",
              "USER","COMPUTER",
              "MESSAGE","STRINGS","DATA")

if ((len(sys.argv) != 3) and (len(sys.argv) != 2))\
       or (sys.argv[1] == '-h') or (sys.argv[1] == '--help'):
    usage()
    sys.exit(1)

DB_PATH=sys.argv[1]
if len(sys.argv) == 2:
    logs = os.listdir("%s/services" % DB_PATH)
    for l in logs:
        print l
    sys.exit(0)


LOG=sys.argv[2]
msg_repo = messageRepository(DB_PATH, LOG)

evt_file = "%s/logs/%s.evt" % (DB_PATH, LOG)
evt_handle = file(evt_file, "r")

csvwriter = csv.writer(sys.stdout)
csvwriter.writerow(header_rec)
rec = getRecord(evt_handle)
while rec:
    rec = map(quoteBinaryInString, rec)
    csvwriter.writerow(rec)
    rec = getRecord(evt_handle)
